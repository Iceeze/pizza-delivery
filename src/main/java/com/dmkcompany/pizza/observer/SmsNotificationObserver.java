package com.dmkcompany.pizza.observer;

import com.dmkcompany.pizza.factory.Notification;
import com.dmkcompany.pizza.factory.NotificationFactory;
import com.dmkcompany.pizza.factory.NotificationMessage;
import com.dmkcompany.pizza.factory.NotificationType;
import com.dmkcompany.pizza.model.Order;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

@Slf4j
@Component
@RequiredArgsConstructor
public class SmsNotificationObserver implements OrderObserver {

    private final NotificationFactory notificationFactory;

    @Override
    public void update(Order order, String eventType) {
        if (order.getCustomerPhone() == null || order.getCustomerPhone().trim().isEmpty()) {
            log.debug("–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ {}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É", order.getOrderNumber());
            return;
        }

        try {
            String message = createMessage(order, eventType);
            NotificationMessage notificationMessage = new NotificationMessage(
                    order.getCustomerPhone(),
                    message,
                    NotificationType.SMS
            );

            Notification notification = notificationFactory.createNotification(NotificationType.SMS);
            notification.send(notificationMessage);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS –¥–ª—è –∑–∞–∫–∞–∑–∞ {}: {}", order.getOrderNumber(), e.getMessage());
        }
    }

    @Override
    public boolean supports(String eventType) {
        // SMS —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        return "ORDER_READY".equals(eventType) ||
                "ORDER_DELIVERED".equals(eventType);
    }

    private String createMessage(Order order, String eventType) {
        switch (eventType) {
            case "ORDER_READY":
                return String.format("–ó–∞–∫–∞–∑ ‚Ññ%s –≥–æ—Ç–æ–≤ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ! –û–∂–∏–¥–∞–π—Ç–µ –∫—É—Ä—å–µ—Ä–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç.",
                        order.getOrderNumber());
            case "ORDER_DELIVERED":
                return String.format("–ó–∞–∫–∞–∑ ‚Ññ%s –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! üçï",
                        order.getOrderNumber());
            default:
                return String.format("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ%s", order.getOrderNumber());
        }
    }
}