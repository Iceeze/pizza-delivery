package com.dmkcompany.pizza.service.proxy;

import com.dmkcompany.pizza.model.Product;
import com.dmkcompany.pizza.service.ProductService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Primary;
import org.springframework.stereotype.Component;

import java.util.List;

@Slf4j
@Component
@Primary
@RequiredArgsConstructor
public class ProductServiceLoggingProxy implements ProductService {

    @Qualifier("productServiceImpl")
    private final ProductService realProductService;

    @Override
    public List<Product> getProductsByCategory(Long categoryId) {
        long startTime = System.currentTimeMillis();
        log.info("üìä –ó–ê–ü–†–û–° –ö–ê–¢–ï–ì–û–†–ò–ò: –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {}", categoryId);

        try {
            List<Product> products = realProductService.getProductsByCategory(categoryId);
            long duration = System.currentTimeMillis() - startTime;

            log.info("‚úÖ –ö–ê–¢–ï–ì–û–†–ò–Ø {}: –ù–∞–π–¥–µ–Ω–æ {} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–≤—Ä–µ–º—è: {} –º—Å)",
                    categoryId, products.size(), duration);

            if (!products.isEmpty()) {
                String popularProducts = products.stream()
                        .limit(3)
                        .map(Product::getName)
                        .reduce((a, b) -> a + ", " + b)
                        .orElse("");
                log.info("üèÜ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {}: {}", categoryId, popularProducts);
            }

            return products;
        } catch (Exception e) {
            log.error("‚ùå –û–®–ò–ë–ö–ê –ö–ê–¢–ï–ì–û–†–ò–ò {}: {}", categoryId, e.getMessage());
            throw e;
        }
    }

    @Override
    public List<Product> getAllProducts() {
        long startTime = System.currentTimeMillis();
        log.info("üìä –ó–ê–ü–†–û–° –í–°–ï–• –ü–†–û–î–£–ö–¢–û–í: –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤");

        try {
            List<Product> products = realProductService.getAllProducts();
            long duration = System.currentTimeMillis() - startTime;

            log.info("‚úÖ –í–°–ï –ü–†–û–î–£–ö–¢–´: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–≤—Ä–µ–º—è: {} –º—Å)",
                    products.size(), duration);

            long pizzaCount = products.stream().filter(p -> p.getCategoryId() == 1L).count();
            long sauceCount = products.stream().filter(p -> p.getCategoryId() == 2L).count();
            long drinkCount = products.stream().filter(p -> p.getCategoryId() == 3L).count();

            log.info("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê: –ü–∏—Ü—Ü—ã: {}, –°–æ—É—Å—ã: {}, –ù–∞–ø–∏—Ç–∫–∏: {}",
                    pizzaCount, sauceCount, drinkCount);

            return products;
        } catch (Exception e) {
            log.error("‚ùå –û–®–ò–ë–ö–ê –í–°–ï–• –ü–†–û–î–£–ö–¢–û–í: {}", e.getMessage());
            throw e;
        }
    }

    @Override
    public Product getProductById(Long id) {
        long startTime = System.currentTimeMillis();
        log.info("üìä –ó–ê–ü–†–û–° –ü–†–û–î–£–ö–¢–ê: –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–¥—É–∫—Ç–∞ —Å ID {}", id);

        try {
            Product product = realProductService.getProductById(id);
            long duration = System.currentTimeMillis() - startTime;

            if (product != null) {
                log.info("‚úÖ –ü–†–û–î–£–ö–¢ {}: '{}' - {} —Ä—É–±. (–≤—Ä–µ–º—è: {} –º—Å)",
                        id, product.getName(), product.getBasePrice(), duration);
            } else {
                log.warn("‚ö†Ô∏è –ü–†–û–î–£–ö–¢ {}: –ù–µ –Ω–∞–π–¥–µ–Ω (–≤—Ä–µ–º—è: {} –º—Å)", id, duration);
            }

            return product;
        } catch (Exception e) {
            log.error("‚ùå –û–®–ò–ë–ö–ê –ü–†–û–î–£–ö–¢–ê {}: {}", id, e.getMessage());
            throw e;
        }
    }

    public void logProductAccessStatistics() {
        log.info("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–û–°–¢–£–ü–ê: –ü—Ä–æ–∫—Å–∏ –∞–∫—Ç–∏–≤–µ–Ω, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç");
    }
}
